// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Role field for automatic role assignment (SQLite doesn't support enums)
model User {
  id               String    @id @default(cuid())
  email            String    @unique
  passwordHash     String?
  name             String
  googleId         String?   @unique
  avatar           String?
  walletAddress    String?   @unique
  role             String    @default("DJ") // GUEST, DJ, VERIFIED_DJ, CLIENT, CURATOR, OPERATIONS, PARTNER, ADMIN
  tokenBalance     Int       @default(0)
  currentStreak    Int       @default(0)
  totalCheckIns    Int       @default(0)
  missionsCompleted Int      @default(0)
  level            String    @default("Navigator")
  theme            String    @default("dark")
  badges           String
  isActive         Boolean   @default(true)
  lastLoginAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Serato Integration Fields
  seratoAccessToken     String?
  seratoRefreshToken    String?
  seratoTokenExpiresAt  DateTime?
  seratoUsername        String?
  seratoDisplayName     String?
  seratoConnectedAt     DateTime?
  
  // Relations
  checkIns         CheckIn[]
  userMissions     UserMission[]
  expenses         Expense[]
  chatMessages     ChatMessage[]
  sessions         UserSession[]
  curatedMissions  P2pMission[] @relation("CuratedMissions")
  runningMissions  P2pMission[] @relation("RunningMissions")
  chatGPTCostLogs  ChatGPTCostLog[]
  curatedTeams     Team[]        @relation("CuratedTeams")
  memberTeams      Team[]        @relation("TeamMembers")
  
  @@map("users")
}

model UserSession {
  id          String   @id @default(cuid())
  userId      String
  token       String   @unique
  expiresAt   DateTime
  userAgent   String?
  ipAddress   String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model Venue {
  id              String   @id @default(cuid())
  name            String
  address         String
  city            String   @default("Atlanta")
  state           String   @default("GA")
  zipCode         String?
  latitude        Float?
  longitude       Float?
  type            String
  hours           String
  phoneNumber     String?
  website         String?
  checkInReward   Int
  status          String   @default("open")
  crowdLevel      String   @default("Medium")
  safetyRating    Float    @default(4.0)
  avgCost         Int
  specialMissions String
  amenities       String
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  checkIns        CheckIn[]
  expenses        Expense[]
  
  @@map("venues")
}

model CheckIn {
  id          String   @id @default(cuid())
  userId      String
  venueId     String
  timestamp   DateTime @default(now())
  location    String?
  notes       String?
  photos      String?
  rating      Int?
  isVerified  Boolean  @default(false)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  venue       Venue    @relation(fields: [venueId], references: [id], onDelete: Cascade)
  
  @@map("check_ins")
}

model Mission {
  id              String   @id @default(cuid())
  title           String
  description     String
  type            String   // research, checkin, social, creative
  difficulty      String   @default("Easy") // Easy, Medium, Hard
  reward          Int
  requirements    String
  deadline        DateTime?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  userMissions    UserMission[]
  
  @@map("missions")
}

model UserMission {
  id          String   @id @default(cuid())
  userId      String
  missionId   String
  status      String   @default("assigned") // assigned, in_progress, completed, failed
  startedAt   DateTime @default(now())
  completedAt DateTime?
  notes       String?
  evidence    String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  mission     Mission  @relation(fields: [missionId], references: [id], onDelete: Cascade)
  
  @@map("user_missions")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  curatorId   String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  curator     User     @relation("CuratedTeams", fields: [curatorId], references: [id], onDelete: Cascade)
  members     User[]   @relation("TeamMembers")
  missions    P2pMission[] @relation("TeamMissions")
  
  @@map("teams")
}

model P2pMission {
  id                String   @id @default(cuid())
  curatorId         String
  runnerId          String?
  teamId            String?  // If present, only team members can see/accept
  title             String
  description       String
  venueAddress      String
  eventType         String
  budget            Float
  deadline          DateTime
  paymentMethod     String   // matic, usdc, cashapp, zelle, venmo, paypal
  ipfsHash          String   // Mission details stored on IPFS
  proofHash         String?  // Proof of completion stored on IPFS
  status            String   @default("OPEN") // OPEN, ASSIGNED, IN_PROGRESS, COMPLETED, DISPUTED, CANCELLED
  requirements      String   // JSON string of requirements
  openMarket        Boolean  @default(true) // Open to all runners, or restricted to team
  assignedAt        DateTime?
  proofSubmittedAt  DateTime?
  completedAt       DateTime?
  cancelledAt       DateTime?
  paymentDetails    String?  // JSON string of payment details
  disputeRaisedBy   String?
  disputeReason     String?
  disputeEvidence   String?
  disputeRaisedAt   DateTime?
  
  // Enhanced verification fields
  verificationMethod String?  // "manual", "serato_automated", "manual_with_proof"
  verificationDetails String? // JSON string of verification results
  trackRequirements   String? // JSON string of specific track requirements
  verificationWindow  String? // JSON string of time window for verification
  autoVerifyEnabled   Boolean @default(false) // Whether to use automatic Serato verification
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  curator           User     @relation("CuratedMissions", fields: [curatorId], references: [id], onDelete: Cascade)
  runner            User?    @relation("RunningMissions", fields: [runnerId], references: [id], onDelete: SetNull)
  team              Team?    @relation("TeamMissions", fields: [teamId], references: [id], onDelete: SetNull)
  
  @@map("p2p_missions")
}

model Expense {
  id          String   @id @default(cuid())
  userId      String
  venueId     String?
  amount      Float
  category    String
  description String
  date        DateTime @default(now())
  receipt     String?
  isReimbursed Boolean @default(false)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  venue       Venue?   @relation(fields: [venueId], references: [id], onDelete: SetNull)
  
  @@map("expenses")
}

model ChatMessage {
  id          String   @id @default(cuid())
  userId      String
  content     String
  type        String   @default("text") // text, image, location
  timestamp   DateTime @default(now())
  isRead      Boolean  @default(false)
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

model ChatGPTCostLog {
  id        String   @id @default(cuid())
  userId    String
  cost      Float    @default(0)
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, timestamp])
  @@index([timestamp])
}
