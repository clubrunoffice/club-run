// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User and Authentication Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  userRoles     UserRole[]
  permissions   UserPermission[]
  profile       UserProfile?
  activities    Activity[]
  notifications Notification[]
  messagesSent  Message[] @relation("MessageSender")
  messagesReceived Message[] @relation("MessageReceiver")
  activityParticipants ActivityParticipant[]
  voicePermissions VoicePermission[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// RBAC System Models
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userRoles   UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  resource    String   // e.g., "user", "activity", "notification"
  action      String   // e.g., "create", "read", "update", "delete"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  rolePermissions RolePermission[]
  userPermissions UserPermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserPermission {
  id           String @id @default(cuid())
  userId       String
  permissionId String
  granted      Boolean @default(true)
  grantedAt    DateTime @default(now())
  grantedBy    String?

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// User Profile Model
model UserProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  firstName   String?
  lastName    String?
  phone       String?
  dateOfBirth DateTime?
  gender      String?
  address     String?
  city        String?
  state       String?
  zipCode     String?
  country     String?
  bio         String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

// Activity and Club Models
model Activity {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // e.g., "running", "cycling", "swimming"
  distance    Float?
  duration    Int?     // in minutes
  date        DateTime
  location    String?
  coordinates Json?    // {lat: number, lng: number}
  status      String   @default("scheduled") // scheduled, active, completed, cancelled
  maxParticipants Int?
  currentParticipants Int @default(0)
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  creator     User     @relation(fields: [createdBy], references: [id])
  participants ActivityParticipant[]
  notifications Notification[]

  @@map("activities")
}

model ActivityParticipant {
  id         String @id @default(cuid())
  activityId String
  userId     String
  status     String @default("registered") // registered, confirmed, attended, no-show
  joinedAt   DateTime @default(now())

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([activityId, userId])
  @@map("activity_participants")
}

// Notification System
model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   // info, warning, error, success
  read      Boolean  @default(false)
  data      Json?    // Additional data for the notification
  createdAt DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity? @relation(fields: [activityId], references: [id], onDelete: Cascade)
  activityId String?

  @@map("notifications")
}

// Messaging System
model Message {
  id        String   @id @default(cuid())
  senderId  String
  receiverId String
  content   String
  type      String   @default("text") // text, image, file
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  sender   User @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// Voice Permission System
model VoicePermission {
  id          String   @id @default(cuid())
  userId      String
  permission  String   // e.g., "microphone", "camera", "location"
  granted     Boolean  @default(false)
  grantedAt   DateTime?
  revokedAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permission])
  @@map("voice_permissions")
}

// System Settings
model SystemSetting {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json
  description String?

  @@map("system_settings")
}
